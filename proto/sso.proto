syntax = "proto3";

package sso;

option go_package = "./sso";

service AuthService {
    rpc Register(RegisterRequest) returns (AuthResponse);
    rpc Login(LoginRequest) returns (AuthResponse);
    rpc Logout(LogoutRequest) returns (SuccessResponse);
}
service UserService {
    rpc GetUser(GetUserRequest) returns (GetUserResponse);
    rpc UpdateUser(UpdateUserRequest) returns (SuccessResponse);
    rpc SetRole(SetRoleRequest) returns (SuccessResponse);
    rpc ChangePassword(ChangePasswordRequest) returns (SuccessResponse);
}
service TokenService {
    rpc ValidateToken(ValidateTokenRequest) returns (SuccessResponse);
    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
}

message User {
    string id = 1; // uuid
    string username = 2;
    string email = 3;
    Role role = 4;
}

message RegisterRequest {
    string username = 1;
    string email = 2;
    string password = 3;
}
message LoginRequest {
    string username = 1;
    string email = 2;
    string password = 3;
}
message AuthResponse {
    string id = 1; // uuid
    string access_token = 2; // jwt
    string refresh_token = 3; // jwt
}

message LogoutRequest {
    string token = 1; // jwt
}

message GetUserRequest {
    string id = 1; // uuid
}
message GetUserResponse {
    User user = 1;
}

message UpdateUserRequest {
    string id = 1; // uuid // required
    string username = 2;
    string email = 3;
}

message SetRoleRequest {
    string email = 1;
    Role wants_role = 2;
}

message ChangePasswordRequest {
    string id = 1; // uuid
    string old_password = 2;
    string new_password = 3;
}

message ValidateTokenRequest {
    string token = 1; // jwt
}

message RefreshTokenRequest {
    string token = 1; // jwt
}
message RefreshTokenResponse {
    string access_token = 1; // jwt
    string refresh_token = 2; // jwt
}

message SuccessResponse {
    bool success = 1;
}

enum Role {
    USER = 0;
    ADMIN = 1;
}

message Empty {
}
